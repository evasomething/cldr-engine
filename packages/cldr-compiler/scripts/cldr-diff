#!/usr/bin/env python3

# generate a report showing the differences between two versions of
# the cldr json data.
#
# Usage: cldr-diff .cldr/36.0.0 .cldr/37.0.0

import os, sys
from collections import defaultdict
from subprocess import Popen, PIPE

CWD = os.path.dirname(os.path.abspath(__file__))
OUT = os.path.join(CWD, '..', 'cldr-diff-report')

def run(old, new):
    # run a diff between the old and new files
    proc = Popen(['diff', '-Nau', old, new], stdout=PIPE)
    out, _ = proc.communicate()
    return out.decode('utf-8')

def filenames(top):
    # list all files in the given top-level directory
    r = defaultdict(set)
    for root, dirs, names in os.walk(top):
        for n in names:
            p = os.path.join(root, n)
            q = os.path.relpath(p, top)
            f = os.path.basename(q)
            r[f].add(q)
    return r

def main():
    args = sys.argv[1:]
    if len(args) != 2:
        print('Error: please provide path to root of old / new CLDR trees')
        print('Example: cldr-diff .cldr/36.0.0 .cldr/37.0.0')
        return

    # root directories of old and new release
    old_root = args[0]
    new_root = args[1]

    # list all files in each root recursively
    old = filenames(old_root)
    new = filenames(new_root)

    # check if any new files have been added
    old_keys = set(old.keys())
    new_keys = set(new.keys())
    diff = new_keys - old_keys
    if diff:
        print('new files:', sorted(diff))

    # track differences by filename
    results = defaultdict(list)

    # iterate over filenames, e.g. "units.json"
    keys = sorted(new_keys)
    for k in keys:
        # check if a new locale has been added for this filename
        old_keys = old[k]
        new_keys = new[k]
        diff = new_keys - old_keys
        if diff:
            print('New locales:', ', '.join(sorted(diff)))

        # iterate over filenames for specific locales, e.g. "main/en/units.json"
        for n in sorted(new_keys):
            if n not in old_keys:
                continue
            # compute the diff between old and new
            op = os.path.join(old_root, n)
            np = os.path.join(new_root, n)
            diff = run(op, np)

            # check if anything changed besides the version numbers
            lines = diff.split('\n')
            nl = [l for l in lines
                if l.startswith('+ ')
                  and not '_cldrVersion' in l
                  and not '_unicodeVersion' in l]
            if not nl:
                continue

            # add to results for this filename
            results[k].append(diff)

    # generate a report per filename
    if not os.path.exists(OUT):
        os.makedirs(OUT)
    for k in keys:
        p = os.path.join(OUT, k + '.txt')
        d = '\n'.join(results[k])
        if d:
            open(p, 'w').write(d)

if __name__ == '__main__':
    main()

